#this script will plot the average league score, goal difference, and goals scored for each league position over a window of five years
#this script uses the files generated by 'plot_league_points.py', so make sure to run that one first

import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

##### decide whether or not to save the figure that this script produces #####
save_figs = 0

##### decide whether or not to save the data table that this script produces #####
save_created_data_frames = 0

##### list the seasons that you want to evaluate #####
season_span_list = ['15_16', '16_17', '17_18', '18_19', '19_20']

##### import the data and store it in dataframes #####
league_positions_df_01 = pd.read_csv(season_span_list[0] + '_PL_league_position_data.csv', index_col='match week')
league_positions_df_02 = pd.read_csv(season_span_list[1] + '_PL_league_position_data.csv', index_col='match week')
league_positions_df_03 = pd.read_csv(season_span_list[2] + '_PL_league_position_data.csv', index_col='match week')
league_positions_df_04 = pd.read_csv(season_span_list[3] + '_PL_league_position_data.csv', index_col='match week')
league_positions_df_05 = pd.read_csv(season_span_list[4] + '_PL_league_position_data.csv', index_col='match week')

league_scores_df_01 = pd.read_csv(season_span_list[0] + '_PL_league_score_data.csv', index_col='match week')
league_scores_df_02 = pd.read_csv(season_span_list[1] + '_PL_league_score_data.csv', index_col='match week')
league_scores_df_03 = pd.read_csv(season_span_list[2] + '_PL_league_score_data.csv', index_col='match week')
league_scores_df_04 = pd.read_csv(season_span_list[3] + '_PL_league_score_data.csv', index_col='match week')
league_scores_df_05 = pd.read_csv(season_span_list[4] + '_PL_league_score_data.csv', index_col='match week')

goal_differences_df_01 = pd.read_csv(season_span_list[0] + '_PL_goal_difference_data.csv', index_col='match week')
goal_differences_df_02 = pd.read_csv(season_span_list[1] + '_PL_goal_difference_data.csv', index_col='match week')
goal_differences_df_03 = pd.read_csv(season_span_list[2] + '_PL_goal_difference_data.csv', index_col='match week')
goal_differences_df_04 = pd.read_csv(season_span_list[3] + '_PL_goal_difference_data.csv', index_col='match week')
goal_differences_df_05 = pd.read_csv(season_span_list[4] + '_PL_goal_difference_data.csv', index_col='match week')

goals_scored_df_01 = pd.read_csv(season_span_list[0] + '_PL_goals_scored_data.csv', index_col='match week')
goals_scored_df_02 = pd.read_csv(season_span_list[1] + '_PL_goals_scored_data.csv', index_col='match week')
goals_scored_df_03 = pd.read_csv(season_span_list[2] + '_PL_goals_scored_data.csv', index_col='match week')
goals_scored_df_04 = pd.read_csv(season_span_list[3] + '_PL_goals_scored_data.csv', index_col='match week')
goals_scored_df_05 = pd.read_csv(season_span_list[4] + '_PL_goals_scored_data.csv', index_col='match week')

##### reorder the data columns so that they reflect final league position for a given season #####
#I already did this in 'plot_league_points.py' for the league positions dataframe, but I will redo it here just in case that script changes in the future
def sort_by_lp( league_positions_df, league_scores_df, goal_differences_df, goals_scored_df ):
    orig_cols = league_positions_df.columns.tolist()
    final_league_positions = league_positions_df.loc[38].values.tolist()
    cols_by_lp = []
    for i in range(1, 21):
        new_lp_idx = final_league_positions.index(i)
        cols_by_lp.append( orig_cols[new_lp_idx] )
    league_positions_df = league_positions_df[cols_by_lp]
    league_scores_df = league_scores_df[cols_by_lp]
    goal_differences_df = goal_differences_df[cols_by_lp]
    goals_scored_df = goals_scored_df[cols_by_lp]
    return( league_positions_df, league_scores_df, goal_differences_df, goals_scored_df )

[league_positions_df_01, league_scores_df_01, goal_differences_df_01, goals_scored_df_01] = sort_by_lp(league_positions_df_01, league_scores_df_01, goal_differences_df_01, goals_scored_df_01)
[league_positions_df_02, league_scores_df_02, goal_differences_df_02, goals_scored_df_02] = sort_by_lp(league_positions_df_02, league_scores_df_02, goal_differences_df_02, goals_scored_df_02)
[league_positions_df_03, league_scores_df_03, goal_differences_df_03, goals_scored_df_03] = sort_by_lp(league_positions_df_03, league_scores_df_03, goal_differences_df_03, goals_scored_df_03)
[league_positions_df_04, league_scores_df_04, goal_differences_df_04, goals_scored_df_04] = sort_by_lp(league_positions_df_04, league_scores_df_04, goal_differences_df_04, goals_scored_df_04)
[league_positions_df_05, league_scores_df_05, goal_differences_df_05, goals_scored_df_05] = sort_by_lp(league_positions_df_05, league_scores_df_05, goal_differences_df_05, goals_scored_df_05)

##### change the column names so that they reflect final league position rather than the actual team name #####
league_pos_rank = list( range(1,21) ) #these will serve as the columns for each dataframe

for df in [league_positions_df_01, league_positions_df_02, league_positions_df_03, league_positions_df_04, league_positions_df_05]:
    df.columns = league_pos_rank
league_positions_concat_df = pd.concat( (league_positions_df_01, league_positions_df_02, league_positions_df_03, league_positions_df_04, league_positions_df_05) ) #this just appends one dataframe onto the bottom of the other

for df in [league_scores_df_01, league_scores_df_02, league_scores_df_03, league_scores_df_04, league_scores_df_05]:
    df.columns = league_pos_rank
league_scores_concat_df = pd.concat( (league_scores_df_01, league_scores_df_02, league_scores_df_03, league_scores_df_04, league_scores_df_05) ) #this just appends one dataframe onto the bottom of the other

for df in [goal_differences_df_01, goal_differences_df_02, goal_differences_df_03, goal_differences_df_04, goal_differences_df_05]:
    df.columns = league_pos_rank
goal_differences_concat_df = pd.concat( (goal_differences_df_01, goal_differences_df_02, goal_differences_df_03, goal_differences_df_04, goal_differences_df_05) ) #this just appends one dataframe onto the bottom of the other

for df in [goals_scored_df_01, goals_scored_df_02, goals_scored_df_03, goals_scored_df_04, goals_scored_df_05]:
    df.columns = league_pos_rank
goals_scored_concat_df = pd.concat( (goals_scored_df_01, goals_scored_df_02, goals_scored_df_03, goals_scored_df_04, goals_scored_df_05) ) #this just appends one dataframe onto the bottom of the other

##### calculate the mean and standard deviation for each final league position by match week based on the data from a group of seasons #####
league_positions_by_row_index = league_positions_concat_df.groupby(league_positions_concat_df.index) #group the concatenated dataframe by row index (match week)
league_positions_concat_df_means = league_positions_by_row_index.mean() #calculated the mean value of each column (final league position) at each grouped index (match week)
league_positions_concat_df_stds = league_positions_by_row_index.std(ddof=0) #ddof is 'delta degrees of freedom'. the default value is 1, which produces the sample std. we want the population std instead
#make two new dataframes that contain the mean + std and mean - std, respectively (useful for plotting later)
league_positions_concat_df_add_stds = league_positions_concat_df_means.add(league_positions_concat_df_stds)
league_positions_concat_df_subtract_stds = league_positions_concat_df_means.subtract(league_positions_concat_df_stds)

league_scores_by_row_index = league_scores_concat_df.groupby(league_scores_concat_df.index) #group the concatenated dataframe by row index (match week)
league_scores_concat_df_means = league_scores_by_row_index.mean() #calculated the mean value of each column (final league position) at each grouped index (match week)
league_scores_concat_df_stds = league_scores_by_row_index.std(ddof=0) #ddof is 'delta degrees of freedom'. the default value is 1, which produces the sample std. we want the population std instead
#make two new dataframes that contain the mean + std and mean - std, respectively (useful for plotting later)
league_scores_concat_df_add_stds = league_scores_concat_df_means.add(league_scores_concat_df_stds)
league_scores_concat_df_subtract_stds = league_scores_concat_df_means.subtract(league_scores_concat_df_stds)

goal_differences_by_row_index = goal_differences_concat_df.groupby(goal_differences_concat_df.index) #group the concatenated dataframe by row index (match week)
goal_differences_concat_df_means = goal_differences_by_row_index.mean() #calculated the mean value of each column (final league position) at each grouped index (match week)
goal_differences_concat_df_stds = goal_differences_by_row_index.std(ddof=0) #ddof is 'delta degrees of freedom'. the default value is 1, which produces the sample std. we want the population std instead
#make two new dataframes that contain the mean + std and mean - std, respectively (useful for plotting later)
goal_differences_concat_df_add_stds = goal_differences_concat_df_means.add(goal_differences_concat_df_stds)
goal_differences_concat_df_subtract_stds = goal_differences_concat_df_means.subtract(goal_differences_concat_df_stds)

goals_scored_by_row_index = goals_scored_concat_df.groupby(goals_scored_concat_df.index) #group the concatenated dataframe by row index (match week)
goals_scored_concat_df_means = goals_scored_by_row_index.mean() #calculated the mean value of each column (final league position) at each grouped index (match week)
goals_scored_concat_df_stds = goals_scored_by_row_index.std(ddof=0) #ddof is 'delta degrees of freedom'. the default value is 1, which produces the sample std. we want the population std instead
#make two new dataframes that contain the mean + std and mean - std, respectively (useful for plotting later)
goals_scored_concat_df_add_stds = goals_scored_concat_df_means.add(goals_scored_concat_df_stds)
goals_scored_concat_df_subtract_stds = goals_scored_concat_df_means.subtract(goals_scored_concat_df_stds)

##### set up the colors that will be used to plot the weekly data color-coded by final league position #####
color_map = matplotlib.cm.get_cmap('viridis')
color_map_positions = list( range(0,21) ) #20 teams total
color_map_positions[:] = [x / 20 for x in color_map_positions] #normalize the color map positions so that they increment from 0 to 1 now

##### plot league positions data #####
fig_01 = plt.figure(figsize=(10, 5))
fig_01.suptitle('Five season average: ' + season_span_list[0] + ' to ' + season_span_list[-1])
grid_01 = plt.GridSpec(3, 3)
axes_01 = []
axes_01.append( fig_01.add_subplot(grid_01[:, :]) )
axes_01[0].set_title('league position throughout the seasaon')
axes_01[0].set_xlabel('match week', fontsize=14, color='black')
axes_01[0].set_ylabel('average league position by league position', fontsize=14, color='black')
axes_01[0].set_xlim(0, 38)
axes_01[0].set_ylim(21, 0)
axes_01[0].set_yticks(np.arange(1, 21, step=1))

cmp_idx = 0 #keep track of the color map index
for col in league_positions_concat_df_means.columns:
    if (cmp_idx % 2) ==0: #even number
        lp_plot = league_positions_concat_df_means.plot(y=col, use_index=True, color=color_map(color_map_positions[cmp_idx]), linewidth=2.0, marker='h', markerfacecolor=(0.5,0.5,0.5), markeredgewidth=1, markersize=5, ax=axes_01[0])
    else: #odd number
        lp_plot = league_positions_concat_df_means.plot(y=col, use_index=True, color=color_map(color_map_positions[cmp_idx]), linewidth=2.0, marker='h', markerfacecolor=(1.0,1.0,1.0), markeredgewidth=1, markersize=5, ax=axes_01[0])
    axes_01[0].fill_between(list( range(0,39) ), league_positions_concat_df_subtract_stds[col], league_positions_concat_df_add_stds[col], color=color_map(color_map_positions[cmp_idx]), alpha=0.2) #shade between the mean - std and the mean + std
    cmp_idx+=1
#set up the figure legend
box = axes_01[0].get_position()
axes_01[0].set_position([box.x0, box.y0, box.width * 0.8, box.height])
axes_01[0].legend(loc='center left', bbox_to_anchor=(1, 0.5))

##### plot league points data #####
fig_02 = plt.figure(figsize=(10, 5))
fig_02.suptitle('Five season average: ' + season_span_list[0] + ' to ' + season_span_list[-1])
grid_02 = plt.GridSpec(3, 3)
axes_02 = []
axes_02.append( fig_02.add_subplot(grid_02[:, :]) )
axes_02[0].set_title('when league points were won')
axes_02[0].set_xlabel('match week', fontsize=14, color='black')
axes_02[0].set_ylabel('average league points by league position', fontsize=14, color='black')
axes_02[0].set_xlim(0, 38)
axes_02[0].set_ylim(0, 114)

cmp_idx = 0 #keep track of the color map index
for col in league_scores_concat_df_means.columns:
    if (cmp_idx % 2) ==0: #even number
        ls_plot = league_scores_concat_df_means.plot(y=col, use_index=True, color=color_map(color_map_positions[cmp_idx]), linewidth=2.0, marker='h', markerfacecolor=(0.5,0.5,0.5), markeredgewidth=1, markersize=5, ax=axes_02[0])
    else: #odd number
        ls_plot = league_scores_concat_df_means.plot(y=col, use_index=True, color=color_map(color_map_positions[cmp_idx]), linewidth=2.0, marker='h', markerfacecolor=(1.0,1.0,1.0), markeredgewidth=1, markersize=5, ax=axes_02[0])
    axes_02[0].fill_between(list( range(0,39) ), league_scores_concat_df_subtract_stds[col], league_scores_concat_df_add_stds[col], color=color_map(color_map_positions[cmp_idx]), alpha=0.2) #shade between the mean - std and the mean + std
    cmp_idx+=1
#set up the figure legend
box = axes_02[0].get_position()
axes_02[0].set_position([box.x0, box.y0, box.width * 0.8, box.height])
axes_02[0].legend(loc='center left', bbox_to_anchor=(1, 0.5))

##### plot goal difference data #####
fig_03 = plt.figure(figsize=(10, 5))
fig_03.suptitle('Five season average: ' + season_span_list[0] + ' to ' + season_span_list[-1])
grid_03 = plt.GridSpec(3, 3)
axes_03 = []
axes_03.append( fig_03.add_subplot(grid_03[:, :]) )
axes_03[0].set_title('goal difference throughout the season')
axes_03[0].set_xlabel('match week', fontsize=14, color='black')
axes_03[0].set_ylabel('average goal difference by league position', fontsize=14, color='black')
axes_03[0].set_xlim(0, 38)
axes_03[0].set_ylim(-80, 80)

cmp_idx = 0 #keep track of the color map index
for col in goal_differences_concat_df_means.columns:
    #even positions are plotted in blue, odd in red
    if (cmp_idx % 2) ==0: #even number
        gd_plot = goal_differences_concat_df_means.plot(y=col, use_index=True, color=color_map(color_map_positions[cmp_idx]), linewidth=2.0, marker='h', markerfacecolor=(0.5,0.5,0.5), markeredgewidth=1, markersize=5, ax=axes_03[0])
    else: #odd number
        gd_plot = goal_differences_concat_df_means.plot(y=col, use_index=True, color=color_map(color_map_positions[cmp_idx]), linewidth=2.0, marker='h', markerfacecolor=(1.0,1.0,1.0), markeredgewidth=1, markersize=5, ax=axes_03[0])
    axes_03[0].fill_between(list( range(0,39) ), goal_differences_concat_df_subtract_stds[col], goal_differences_concat_df_add_stds[col], color=color_map(color_map_positions[cmp_idx]), alpha=0.2) #shade between the mean - std and the mean + std
    cmp_idx+=1
#set up the figure legend
box = axes_03[0].get_position()
axes_03[0].set_position([box.x0, box.y0, box.width * 0.8, box.height])
axes_03[0].legend(loc='center left', bbox_to_anchor=(1, 0.5))

##### plot total goals data #####
fig_04 = plt.figure(figsize=(10, 5))
fig_04.suptitle('Five season average: ' + season_span_list[0] + ' to ' + season_span_list[-1])
grid_04 = plt.GridSpec(3, 3)
axes_04 = []
axes_04.append( fig_04.add_subplot(grid_04[:, :]) )
axes_04[0].set_title('goals scored throughout the season')
axes_04[0].set_xlabel('match week', fontsize=14, color='black')
axes_04[0].set_ylabel('average total goals by league position', fontsize=14, color='black')
axes_04[0].set_xlim(0, 38)
axes_04[0].set_ylim(0, 120)

cmp_idx = 0 #keep track of the color map index
for col in goals_scored_concat_df_means.columns:
    if (cmp_idx % 2) == 0: #even number
        gs_plot = goals_scored_concat_df_means.plot(y=col, use_index=True, color=color_map(color_map_positions[cmp_idx]), linewidth=2.0, marker='h', markerfacecolor=(0.5,0.5,0.5), markeredgewidth=1, markersize=5, ax=axes_04[0])
    else: #odd number
        gs_plot = goals_scored_concat_df_means.plot(y=col, use_index=True, color=color_map(color_map_positions[cmp_idx]), linewidth=2.0, marker='h', markerfacecolor=(1.0,1.0,1.0), markeredgewidth=1, markersize=5, ax=axes_04[0])
    axes_04[0].fill_between(list( range(0,39) ), goals_scored_concat_df_subtract_stds[col], goals_scored_concat_df_add_stds[col], color=color_map(color_map_positions[cmp_idx]), alpha=0.2) #shade between the mean - std and the mean + std
    cmp_idx+=1
#set up the figure legend
box = axes_04[0].get_position()
axes_04[0].set_position([box.x0, box.y0, box.width * 0.8, box.height])
axes_04[0].legend(loc='center left', bbox_to_anchor=(1, 0.5))

plt.show()
